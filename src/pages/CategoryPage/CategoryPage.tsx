import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import QuestionList from '@components/Questions/QuestionList/QuestionList';
import CategoryListLinks from '@components/Categories/CategoryListLinks/CategoryListLinks';
import QuestionService from '@services/QuestionService';
import CategoryService from '@services/CategoryService';
import LocalStorageService from '@services/LocalStorageService';
import type {Question, Category, QuestionList as QuestionListType} from '@/types';
import './CategoryPage.scss';

interface CategoryPageProps {
  listType?: QuestionListType;
}

const CategoryPage: React.FC<CategoryPageProps> = ({ listType }) => {
  const { id } = useParams<{ id: string }>();
  const [questions, setQuestions] = useState<Question[]>([]);
  const [category, setCategory] = useState<Category | null>(null);
  const [isCompleted, setIsCompleted] = useState(false);
  const [showDetailedHint, setShowDetailedHint] = useState(
    LocalStorageService.getShowDetailedHint()
  );
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadData = async () => {
      if (!id) return;
      
      try {
        setLoading(true);
        setError(null);

        const [categoryData, questionsData] = await Promise.all([
          CategoryService.getCategoryById(id),
          listType
            ? QuestionService.getQuestionsByCategoryAndList(id, listType)
            : QuestionService.getQuestionsByCategory(id),
        ]);

        setCategory(categoryData);
        setQuestions(questionsData);
        setIsCompleted(LocalStorageService.isCategoryCompleted(id));
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load data');
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      loadData();
    }
  }, [id, listType]);

  const handleToggleComplete = () => {
    if (!id) return;
    const newStatus = LocalStorageService.toggleCategoryComplete(id);
    setIsCompleted(newStatus);
  };

  const getPageTitle = () => {
    if (!category) return '';
    
    let title = category.name;
    if (listType === 'favorite') title = `‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - ${title}`;
    if (listType === 'known') title = `‚úÖ –¢–æ—á–Ω–æ –∑–Ω–∞—é - ${title} `;
    if (listType === 'hard') title = `üî• –°–ª–æ–∂–Ω—ã–µ - ${title}`;
    
    return title;
  };

  const getPageDescription = () => {
    if (listType === 'favorite') {
      return '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
    }
    if (listType === 'known') {
      return '–í–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç';
    }
    if (listType === 'hard') {
      return '–í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è';
    }
    return null;
  };

  if (loading) {
    return (
      <div className="category-page category-page--loading">
        <div className="category-page__loader">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  if (error || !category) {
    return (
      <div className="category-page category-page--error">
        <div className="category-page__error">
          {error || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
        </div>
      </div>
    );
  }

  return (
    <div className="category-page">
      <div className="category-page__header">
        <h1 className="category-page__title">{getPageTitle()}</h1>
        {listType && (
          <p className="category-page__description">{getPageDescription()}</p>
        )}
        <hr className="category-page__divider" />
        <div className="category-page__header-content">
          {id && (
            <div className="category-page__links">
              <CategoryListLinks categoryId={id} />
            </div>
          )}
          {!listType && (
            <div className="category-page__controls">
              <label className="category-page__complete">
                <input
                  type="checkbox"
                  checked={isCompleted}
                  onChange={handleToggleComplete}
                />
                <span>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑—É—á–µ–Ω–∞</span>
              </label>
              <label className="category-page__detailed-hint">
                <input
                  type="checkbox"
                  checked={showDetailedHint}
                  onChange={(e) => {
                    const value = e.target.checked;
                    setShowDetailedHint(value);
                    LocalStorageService.setShowDetailedHint(value);
                  }}
                />
                <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ç–æ—Ä—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É</span>
              </label>
            </div>
          )}
        </div>
      </div>

      <QuestionList
        questions={questions}
        showDetailedHint={showDetailedHint}
        emptyMessage={
          listType
            ? `–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–ø–∏—Å–∫–µ "${
                listType === 'favorite'
                  ? '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'
                  : listType === 'known'
                  ? '–¢–æ—á–Ω–æ –∑–Ω–∞—é'
                  : '–°–ª–æ–∂–Ω—ã–µ'
              }"`
            : '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤'
        }
      />
    </div>
  );
};

export default CategoryPage;