// Usage:
//   node gcs_download_rename.js <bucket> <gcsPrefix> <localDir> [--rename-in-gcs]
//
// –ü—Ä–∏–º–µ—Ä:
//   node gcs_download_rename.js my-pdd-bucket out/ ./translated --rename-in-gcs
//
// –î–µ–ª–∞–µ—Ç:
//  - —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ *.txt –∏–∑ gs://bucket/<gcsPrefix> –≤ <localDir>, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–∞–∫ *.json
//  - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –≤ GCS (*.txt -> *.json)

import path from "path";
import fs from "fs";
import { Storage } from "@google-cloud/storage";

async function main() {
  const [bucketName, gcsPrefix, localDir, flag] = process.argv.slice(2);
  const renameInGcs = flag === "--rename-in-gcs";

  if (!bucketName || !gcsPrefix || !localDir) {
    console.error("Usage: node gcs_download_rename.js <bucket> <gcsPrefix> <localDir> [--rename-in-gcs]");
    process.exit(1);
  }

  const storage = new Storage();
  const bucket = storage.bucket(bucketName);
  const prefix = gcsPrefix.endsWith("/") ? gcsPrefix : gcsPrefix + "/";

  await fs.promises.mkdir(localDir, { recursive: true });

  // —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
  const [files] = await bucket.getFiles({ prefix });
  const targets = files.filter(f => f.name.endsWith(".txt") && !f.name.endsWith("/index.csv"));

  if (!targets.length) {
    console.log("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (*.txt) –ø–æ–¥ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º", prefix);
    return;
  }

  console.log(`–ù–∞–π–¥–µ–Ω–æ txt-—Ñ–∞–π–ª–æ–≤: ${targets.length}`);

  for (const file of targets) {
    const baseTxt = path.posix.basename(file.name);               // –Ω–∞–ø—Ä–∏–º–µ—Ä: chunk-01_ru_translated.txt
    const baseJson = baseTxt.replace(/\.txt$/i, ".json");          // -> chunk-01_ru_translated.json
    const localPath = path.join(localDir, baseJson);

    // —Å–∫–∞—á–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ .json
    await file.download({ destination: localPath });
    console.log("‚¨áÔ∏è  Downloaded ‚Üí", localPath);

    if (renameInGcs) {
      const newGcsName = file.name.replace(/\.txt$/i, ".json");    // gs://.../chunk-01_ru_translated.json
      await file.copy(bucket.file(newGcsName));
      await file.delete();
      console.log("üîÅ Renamed in GCS:", file.name, "‚Üí", newGcsName);
    }
  }

  // index.csv –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è ‚Äî —Ç–æ–∂–µ —Å–∫–∞—á–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const indexCsv = files.find(f => path.posix.basename(f.name) === "index.csv");
  if (indexCsv) {
    const dest = path.join(localDir, "index.csv");
    await indexCsv.download({ destination: dest });
    console.log("‚¨áÔ∏è  Downloaded index.csv ‚Üí", dest);
  }

  console.log("‚úÖ –ì–æ—Ç–æ–≤–æ");
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});
